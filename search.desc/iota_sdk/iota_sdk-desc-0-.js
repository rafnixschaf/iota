searchState.loadedDescShard("iota_sdk", 0, "The IOTA Rust SDK\nProvides all the necessary abstractions for interacting …\nBuilder for creating an IotaClient for connecting to the …\nReturn the API version information as a string.\nReturn a list of RPC methods supported by the node the …\nReturn a list of streaming/subscription APIs supported by …\nSet the basic auth credentials for the HTTP client.\nReturn an IotaClient object connected to the Iota network …\nReturn an IotaClient object that is ready to interact with …\nReturn an IotaClient object that is ready to interact with …\nReturn an IotaClient object that is ready to interact with …\nVerify if the API version matches the server version and …\nReturn a reference to the coin read API.\nReturn a reference to the event API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the governance API.\nReturn a reference to the underlying http client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the max concurrent requests allowed.\nReturn a reference to the quorum driver API.\nReturn a reference to the read API.\nSet the request timeout to the specified duration.\nReturn a reference to the transaction builder API.\nReturn a reference to the underlying WebSocket client, if …\nSet the WebSocket ping interval.\nSet the WebSocket URL for the Iota network.\nDefines methods that retrieve information from the IOTA …\nDefines methods to fetch, query, or subscribe to events on …\nDefines methods to get committee and staking info.\nDefines methods to execute transaction blocks and submit …\nDefines methods for retrieving data about objects and …\nUse this function to inspect the current state of the …\nDry run a transaction block given the provided transaction …\nExecute a transaction with a FullNode client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a list of balances grouped by coin type and owned by …\nGet all the coins for the given address regardless of coin …\nGet the balance for the given address filtered by coin …\nGet the first four bytes of the chain’s genesis …\nGet a checkpoint by its ID.\nReturn a list of checkpoints. Results are paginated.\nGet the coin metadata (name, symbol, description, …\nGet coins for the given address filtered by coin type. …\nGet the coins for the given address filtered by coin type. …\nGet committee information for the given epoch.\nGet information for a specified dynamic field object by …\nGet the dynamic fields owned by the given ObjectID. …\nGet a list of events for the given transaction digest.\nGet a stream of filtered events which can be ordered …\nGet the sequence number of the latest checkpoint that has …\nGet the latest IOTA system state object on-chain.\nGet a bcs serialized object’s bytes by object ID.\nGet move modules by package ID, keyed by name.\nGet an object by object ID with optional fields enabled by …\nGet the objects owned by the given address. Results are …\nGet the protocol config by version.\nGet the reference gas price for the network.\nReturn the reference gas price as a u64 or an error …\nGet the reference gas price.\nGet a list of delegated stakes for the given address.\nGet the total supply for a given coin type.\nGet the total number of transaction blocks known to server.\nGet a transaction and its effects by its digest with …\nGet a stream of transactions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a list of objects by their object IDs with optional …\nGet a list of transactions and their effects by their …\nGet a list of filtered events. The response is paginated …\nGet filtered transaction blocks information. Results are …\nGet a list of coins for the given address filtered by coin …\nSubscribe to receive a stream of filtered events.\nSubscribe to a stream of transactions.\nGet an object by ID before the given version.\nGet a parsed past object and version for the provided …\nGet a list of parsed past objects.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nBasic HTTP access authentication in the format of …\nBasic HTTP access authentication in the format of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nAdd an account.\nExecute a transaction and wait for it to be locally …\nExecute a transaction and wait for it to be locally …\nReturns the argument unchanged.\nFind a gas object which fits the budget.\nGet all the gas objects (and conveniently, gas amounts) …\nReturn all the account addresses managed by the wallet and …\nGet the latest object reference given a object id.\nReturn one address and all gas objects owned by that …\nReturn a gas object owned by an arbitrary address managed …\nGiven an address, return one gas object owned by this …\nCalls <code>U::from(self)</code>.\nSign a transaction with a key currently managed by the …")