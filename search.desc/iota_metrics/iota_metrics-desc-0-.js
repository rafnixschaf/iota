searchState.loadedDescShard("iota_metrics", 0, "A future that runs within a monitored scope. This struct …\nIncrements gauge when acquired, decrements when guard drops\nA struct that wraps a future (<code>f</code>) with a <code>GaugeGuard</code>. The …\nMonitorCancellation records a cancelled = true span …\nA trait extension for <code>Future</code> to allow monitoring the …\nA future that runs within a monitored scope. This struct …\nA service to manage the prometheus registries. This …\nAcquires an <code>IntGauge</code> by incrementing its value and …\nAdd a new entry to the ServerTiming header. If the caller …\nCount number of in flight futures running\nCount number of in flight futures running.\nCount number of in flight futures running.\nCount number of in flight futures running.\nDecrements the value of the <code>IntGauge</code> when the <code>IntGaugeGuard</code>…\nWhen the <code>CancelMonitor</code> is dropped, it checks whether the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the global <code>METRICS</code> instance if it has been …\nGet the currently active ServerTiming context. Only …\nWraps the current future in a <code>MonitoredScopeFuture</code> that is …\nInitializes the global <code>METRICS</code> instance by setting it to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the future has completed; otherwise, <code>false</code>.\nHandles a request to retrieve metrics, using the provided …\nProvides wrappers to tokio mpsc channels, with metrics on …\nThis function creates a named scoped object, that keeps …\nCreates a new <code>CancelMonitor</code> that wraps the given future (…\nPolls the wrapped future (<code>f</code>) to determine its readiness. …\nPolls the inner future to determine if it is ready or …\nCreate a metric that measures the uptime from when this …\nCreate a new task-local ServerTiming context and run the …\nCreate a new task-local ServerTiming context and run the …\nRepresents a histogram metric used for collecting and …\nA guard used for timing the duration of an operation and …\nRepresents a collection of histograms for managing …\nReports the elapsed time in milliseconds to the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Histogram</code> instance in the specified <code>Registry</code> …\nAllows to specify percentiles in 1/1000th, e.g. 90pct is …\nObserves a value in the histogram by reporting the given …\nReports a value (<code>Point</code>) to the histogram by sending it …\nStarts a timer and returns a <code>HistogramTimerGuard</code> that, …\nCreates a new <code>Histogram</code> with the specified label values. …\nA newtype for an <code>mpsc::Permit</code> which allows us to inject …\nAn <code>mpsc::Receiver</code> with an <code>IntGauge</code> counting the number of …\nStream API Wrappers! A wrapper around …\nAn <code>mpsc::Sender</code> with an <code>IntGauge</code> counting the number of …\nAn <code>mpsc::WeakSender</code> with an <code>IntGauge</code> counting the number …\nDefines an asynchronous method <code>with_permit</code> for working …\nGets a mutable reference to the inner <code>Receiver</code>.\nGets a reference to the inner <code>Receiver</code>.\nReceives a value from the channel in a blocking manner. …\nReturns the current capacity of the channel.\nConstructor Similar to <code>mpsc::channel</code>, <code>channel</code> creates a …\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel without dropping it.\nCompletes when the receiver has dropped.\nDowngrades the current <code>Sender</code> to a <code>WeakSender</code>, which holds …\nCustom drop logic for the <code>Permit</code> to handle cases where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Receiver</code> into a <code>ReceiverStream</code>.\nReturns the argument unchanged.\nReturns a reference to the underlying gauge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Receiver</code>.\nChecks if the channel has been closed. This happens when …\nCreates a new <code>Permit</code> instance using the provided …\nCreate a new <code>ReceiverStream</code>.\nPolls the inner <code>Receiver</code> for the next item, enabling the …\nPolls to receive the next message on this channel. …\nReceives the next value for this receiver. Decrements the …\nWaits for channel capacity. Once capacity to send one …\nSends a value into the channel using the held <code>Permit</code>. …\nSends a value, waiting until there is capacity. Increments …\nAttempts to receive the next value for this receiver. …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code> …\nUpgrades the <code>WeakSender</code> to a strong <code>Sender</code>, if the …\nAsynchronously reserves a permit for sending a message and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of closed connections frames for a peer …\nThe total number of congestion events for a peer …\nThe congestion window for a peer connection.\nThe connection status of known peers. 0 if not connected, …\nThe number of data blocked frames for a peer connection.\nNumber of disconnect events per peer.\nThe total number of lost bytes for a peer connection.\nThe total number of lost packets for a peer connection.\nFrameStats The number of max data frames for a peer …\nPathStats The rtt for a peer connection in ms.\nThe total number of packets sent for a peer connection.\nThe total number bytes observed by the UDP peer connection.\nUDPStats The total number datagrams observed by the UDP …\nThe total number transmits observed by the UDP peer …\nThe number of connected peers\nReceive buffer size of Anemo socket.\nSend buffer size of Anemo socket.\nA newtype for an <code>mpsc::Permit</code> which allows us to inject …\nWraps <code>mpsc::Receiver</code> with gauges counting the inflight and …\nWraps <code>mpsc::Sender</code> with gauges counting the sent and …\nWraps <code>mpsc::UnboundedReceiver</code> with gauges counting the …\nWraps <code>mpsc::UnboundedSender</code> with gauges counting the sent …\nWraps <code>mpsc::WeakSender</code> with gauges counting the sent and …\nWraps <code>mpsc::WeakUnboundedSender</code> with gauges counting the …\nSends a value into the channel using the held <code>Permit</code>. …\nReceives a value from the channel in a blocking manner. …\nReceives a value from the channel in a blocking manner. …\nReturns the current capacity of the channel.\nWraps <code>mpsc::channel()</code> to create a pair of <code>Sender</code> and …\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel without dropping it.\nCompletes when the receiver has dropped.\nCompletes when the receiver has dropped.\nDowngrades the current <code>Sender</code> to a <code>WeakSender</code>, which holds …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if the channel has been closed. This happens when …\nCreates a new <code>Permit</code> instance using the provided …\nPolls to receive the next message on this channel. …\nPolls to receive the next message on this channel. …\nReceives the next value for this receiver. Decrements the …\nReceives the next value for this receiver. Decrements the …\nWaits for channel capacity. Once capacity to send one …\nSends a value into the channel using the held <code>Permit</code>. After\nSends a value, waiting until there is capacity. Increments …\nSends a value, waiting until there is capacity. Increments …\nAttempts to receive the next value for this receiver. …\nAttempts to receive the next value for this receiver. …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code> …\nWraps <code>mpsc::unbounded_channel()</code> to create a pair of …\nUpgrades the weak reference (<code>WeakSender</code>) to a strong <code>Sender</code>…\nUpgrades the <code>WeakUnboundedSender</code> to a strong …\nAsynchronously reserves a permit for sending a message and …\nMonitors temporary stalls in tokio scheduling every …")