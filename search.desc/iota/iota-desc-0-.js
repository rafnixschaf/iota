searchState.loadedDescShard("iota", 0, "A tool to semi automate fire drills. It still requires …\nDefault address used for commands when none specified\nDefault environment used for commands when none specified\nObtain the Addresses managed by the client.\nList the coin balance of an address\nCall Move function\nQuery the chain identifier from the rpc endpoint.\nQuery a dynamic field by its address.\nList all IOTA environments\nExecute a combined serialized SenderSignedData string.\nExecute a Signed Transaction. This is useful when the user …\nRequest gas coin from faucet. By default, it will use the …\nOnly to be used within CLI\nObtain all gas objects owned by the address. An address’ …\nMerge two coin objects into one coin\nGenerate new address and keypair with keypair scheme flag …\nAdd new IOTA environment.\nGet object info\nObtain all objects owned by the address. It also accepts …\nGlobal options for most transaction execution related …\nGlobal options with gas\nRun a PTB from the provided args\nPay coins to recipients following specified amounts, with …\nPay all residual IOTA coins to the recipient with input …\nPay IOTA coins to recipients following following specified …\nProfile the gas usage of a transaction. Unless an output …\nPublish Move modules\nReplay transactions listed in a file.\nReplay all transactions in a range of checkpoints.\nReplay a given transaction to view transaction effects. …\nSplit a coin object into multiple coins.\nSwitch active address and network(e.g., devnet, local rpc …\nGet a transaction block with the effects, events and …\nTransfer object\nTransfer IOTA, and pay gas with the same IOTA coin object. …\nUpgrade Move modules\nRun the bytecode verifier on the package\nVerify local Move packages against on-chain packages, and …\nActive address\nPerform a dry run of the transaction, without executing it.\nSelect which fields of the response to display. If not …\nCall a dry run with the transaction data to estimate the …\nHelper function to reduce code duplication for executing …\nUses the passed gas_budget for the gas budget variable and …\nSets the gas object to gas, and uses the passed gas_budget …\nUses the passed gas_budget for the gas budget variable, …\nSets the gas object to gas, and uses the passed gas_budget …\nUses the passed gas_budget for the gas budget variable, …\nSets the gas object to gas, and uses the passed gas_budget …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the gas object for gas payment. If not provided, a …\nAn optional gas budget for this transaction (in NANOS). If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries the protocol config for the maximum gas allowed in …\nRequest tokens from the Faucet for the given address\nInstead of executing the transaction, serialize the bcs …\nInstead of executing the transaction, serialize the bcs …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nAddress (or its alias)\nAddress (or its alias)\nAddress (or its alias) owning the objects\nAddress owning the object. If no address is provided, it …\nAn address to be used as the active address for subsequent …\nIf specified, override the addresses for the package’s …\nThe alias must start with a letter and can contain only …\nThe alias for the environment.\nThe amount to transfer, if not specified, the entire coin …\nThe amounts to be paid, following the order of recipients.\nThe amounts to be paid, following the order of recipients.\nSpecific amounts to split out from the coin\nSimplified ordered args like in the function syntax …\nReturn the bcs serialized version of the object\nPackage build options\nPackage build options\nPackage build options\nPackage build options\nID of the coin object to split\nThe address of the coin to be merged.\nShow balance for the specified coin (e.g., …\nCount of equal-size coins to split into\nOptional paging cursor\nDigest of the transaction block\nThe ending checkpoint sequence number of the range of …\nThe RPC server URL (e.g., local rpc server, devnet rpc …\nOptional version of the executor to use, if not specified …\nFunction name in module\nLog extra gas-related information\nOptional gas price for this call. Currently use only for …\nThe ID of the parent object\nObject ID of the object to fetch\nThe input coins to be used for pay recipients, including …\nThe input coins to be used for pay recipients, including …\nThe input coins to be used for pay recipients, following …\nID of the coin to transfer. This is also the gas object.\nMaximum item returned per page\nThe name of the module in the package\nPaths to specific pre-compiled module bytecode to verify …\nID of the object to transfer\nObject ID of the package, which contains the module\nPath to directory containing a Move package\nPath to directory containing a Move package\nPath to directory containing a Move package, (defaults to …\nPath to directory containing a Move package\nThe path to the file of transaction digests to replay, …\nThe address of the coin to merge into.\nIf specified, overrides the filepath of the output …\nProtocol version to use for the bytecode verifier …\nOptional protocol version to use, if not specified …\nLog information about each programmable transaction command\nThe recipient address (or its alias if it’s an address …\nThe recipient addresses, must be of same length as amounts.\nThe recipient addresses, must be of same length as amounts.\nThe RPC Url, for example http://127.0.0.1:9000.\nA list of Base64 encoded signatures …\nBCS serialized sender signed data, as base64 encoded …\nPublish the package without checking whether compiling …\nPublish the package without checking whether compiling …\nDon’t verify source (only valid if –verify-deps is …\nSort by alias instead of address\nThe starting checkpoint sequence number of the range of …\nIf an error is encountered during a transaction, this …\nIf an error is encountered during a transaction, this …\nRecipient address (or its alias if it’s an address in …\nRecipient address (or its alias if it’s an address in …\nBCS serialized transaction data bytes without its type …\nThe digest of the transaction to replay\nThe digest of the transaction to replay\nType arguments to the generic function being called. All …\nID of the upgrade capability for the package being …\nThe url to the faucet\nVerify on-chain dependencies.\nShow a list with each coin’s object ID and balance\nAlso publish transitive dependencies that have not already …\nAlso publish transitive dependencies that have not already …\nOptional WebSocket Url, for example ws://127.0.0.1:9000.\nAn enum representing the parsed arguments of a PTB command.\nA parsed module access consisting of the address, module …\nA parsed PTB command consisting of the command and the …\nA PTB Program consisting of a list of commands and a flag …\nThe <code>ProgramMetadata</code> struct holds metadata about a PTB …\nResolve an <code>Argument</code> into a <code>MoveValue</code> if possible. Errors …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolve an <code>Argument</code> into a <code>MoveValue</code> if possible. Errors …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe PTBBuilder struct is the main workhorse that …\nFinalize a PTB. If there were errors during the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nAn error with a message, a location in the source code, …\nRepresents the location of a range of text in the PTB …\nA value that has an associated location in source code.\nCreate a span that points to the end of the file/string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply a function <code>f</code> to the underlying value, returning a …\n<code>ToString::to_string</code>, but without panic on OOM.\nWiden the span to include another span. The resulting span …\nWiden the span to include another span. The resulting span …\nWiden the span to include another if it is Some, otherwise …\nWiden the span to include another span. The resulting span …\nAdd a help message to an error.\nWrap a value with a span.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a program\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a PTB program parser from a sequence of string.\nParse the sequence of strings into a PTB program. We …\nExposed for testing\nParses and executes the PTB with the sender as the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExposed for testing\nConvert a vector of shell tokens into a single string, …\n<code>ToString::to_string</code>, but without panic on OOM.\n@\n::\n,\n–[a-zA-Z0-9_-]+\n.\nEnd of input.\n-[a-zA-Z0-9]\n0x[0-9a-fA-F][0-9a-fA-F_]*\n[a-zA-Z_][a-zA-Z0-9_-]*\n&lt;\n[\n(\n[1-9][0-9_]*\n–publish &lt;shell-token&gt;\n]\n)\n“…” | ‘…’\nSpecial tokens for unexpected lexer states that the parser …\n–upgraded &lt;shell-token&gt;\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this lexeme signifies the end of the …\nReturns true if this lexeme corresponds to a special error …\nReturns true if this is the kind of lexeme that finishes …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns command outputs in JSON format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a validator to the Genesis builder.\nBuild the Genesis checkpoint.\nExamine the details of the built Genesis checkpoint.\nCreate the Genesis blob file from the current …\nInitialize a Genesis builder which can be configured with …\nInitialize token distribution schedule.\nList the current validators in the Genesis builder.\nValidate the current state of the Genesis builder.\nVerify and sign the built Genesis checkpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path to the Ed25519 network key file for the account.\nThe path to the BLS12381 authority key file for the …\nAn optional description of the validator.\nAn optional URL pointing to an image for the validator.\nThe path to a key file which will be used to sign the …\nThe name of the validator.\nThe network address. This must be a TCP address in ASCII …\nThe path to the Ed25519 network key file.\nThe peer-to-peer address. This must be a UDP address in …\nThe primary address. This must be a UDP address in ASCII …\nAn optional URL pointing to the validator webpage.\nThe path to the Ed25519 network key file for the consensus …\nInvoke Iota’s move-analyzer via CLI\nCommand to initialize the bridge committee, usually used …\nClient for interacting with the IOTA network.\nStart Iota interactive console.\nTool for Fire Drill\nBootstrap and initialize a new iota network\nCreate an IOTA Genesis Ceremony with multiple remote …\nIota keystore tool.\nTool to build and test Move applications.\nStart a local network in two modes: saving state between …\nA tool for validators and validator candidates.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse the input string into a SocketAddr, with a default …\nPackage build options\nSubcommands.\nSubcommands.\nSets the file storing the state of our user accounts (an …\nSets the file storing the state of our user accounts (an …\nSets the file storing the state of our user accounts (an …\nSets the file storing the state of our user accounts (an …\nConfig directory that will be used to store network …\nSet the epoch duration. Can only be used when …\nSet the amount of nanos that the faucet will put in an …\nA new genesis is created each time this flag is set, and …\nPort to start the Fullnode RPC server on. Default port is …\nReturn command outputs in json format\nReturn command outputs in json format.\nReturn command outputs in json format.\nThe path to local migration snapshot files\nThe path to local migration snapshot files\nStart the network without a fullnode\nPath to a package which the command should be run with …\nRemotely stored migration snapshots.\nRemotely stored migration snapshots.\nStart a faucet with default host and port: 0.0.0.0:9123. …\nAn address or an alias associated with a key in the wallet …\nReturns the argument unchanged.\nGet the IotaAddress corresponding to this key identity. If …\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate an old alias to a new one. If a new alias is not …\nConvert private key in Hex or Base64 to new format (Bech32 …\nGiven a Base64 encoded MultiSig signature, decode its …\nGiven a Base64 encoded transaction bytes, decode its …\nOutput the private key of the given key identity in Iota …\nGenerate a new keypair with key scheme flag {ed25519 | …\nAdd a new key to Iota CLI Keystore using either the input …\nList all keys by its Iota address, Base64 encoded public …\nTo MultiSig Iota Address. Pass in a list of all public …\nProvides a list of participating signatures (…\nRead the content at the provided file path. The accepted …\nCreate signature using the private key for for the given …\nCreates a signature by leveraging AWS KMS. Pass in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nSets an alias for this address. The alias must start with …\nThe alias must start with a letter and can contain only …\nSort by alias\nA special key for <code>CompletionCache</code> which will perform …\nA interactive command line shell with history and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate CommandStructure using clap::Command, currently …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate Authority Public Key and Proof and Possession. …\nSubmit an on-chain transaction to become a validator …\nUpdate description. Effectuate immediately.\nPrint out the serialized data of a transaction that sets …\nDisplay metadata about the validator.\nUpdate Image URL. Effectuate immediately.\nOnce you collect enough staking amount, run this command …\nLeave committee starting with the next epoch.\nGet a list of the validators in the network. Use the …\nGenerate a <code>validator.info</code> file and 4 key pair files …\nUpdate name. Effectuate immediately.\nUpdate Network Address. Effectuate from next epoch.\nUpdate Network Public Key. Effectuate from next epoch.\nUpdate P2P Address. Effectuate from next epoch.\nUpdate Primary Address. Effectuate from next epoch.\nUpdate Project URL. Effectuate immediately.\nUpdate Protocol Public Key. Effectuate from next epoch.\nIOTA native bridge committee member registration.\nReport or un-report a validator as bad or non-performant.\nSerialize the payload that is used to generate Proof of …\nUpdate IOTA native bridge committee node url.\nUpdate gas price that is used to calculate Reference Gas …\nUpdate the validator metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nAuthority account address encoded in hex with 0x prefix.\nAuthority public key encoded in hex.\nPath to Bridge Authority Key file.\nNew node url to be registered in the on chain bridge …\nBridge authority URL which clients collects action …\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas budget for this transaction.\nGas price to be set to.\nObject ID of a validator’s OperationCap, used for …\nOptional when sender is the validator itself and it holds …\nOptional when sender is reporter validator itself and it …\nIf true, only print the unsigned transaction and do not …\nIf true, only print the unsigned transaction and do not …\nThe Iota Address of the validator is being reported or …\nAddress of the transaction sender.\nIf true, undo an existing report.\nMust be present if <code>print_unsigned_transaction_only</code> is true.\nMust present if <code>print_unsigned_transaction_only</code> is true.")