searchState.loadedDescShard("iota_light_client", 0, "A proof for specific targets. It certifies a checkpoint …\nDefine aspect of Iota state that needs to be certified in …\nPart of a proof that provides evidence relating to a …\nCheckpoint contents including this transaction.\nA summary of the checkpoint being certified.\nThe next committee being certified.\nConstruct a proof from the given checkpoint data and proof …\nOptional transaction proof to certify objects and events.\nThe effects of the transaction being certified.\nThe events of the transaction being certified.\nEvents that need to be certified.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObjects that need to be certified.\nTargets of the proof are a committee, objects, or events …\nThe transaction being certified.\nVerify a proof against a committee. A proof is valid if it …\nConstruct a proof from the given checkpoint data and proof …\nA proof for specific targets. It certifies a checkpoint …\nDefine aspect of Iota state that needs to be certified in …\nPart of a proof that provides evidence relating to a …\nAdd an event to be certified by event ID and content. A …\nAdd an object to be certified by object reference and …\nCheckpoint contents including this transaction.\nA summary of the checkpoint being certified.\nThe next committee being certified.\nOptional transaction proof to certify objects and events.\nThe effects of the transaction being certified.\nThe events of the transaction being certified.\nEvents that need to be certified.\nCreate a new empty proof target. An empty proof target …\nObjects that need to be certified.\nAdd the next committee to be certified. A verified proof …\nTargets of the proof are a committee, objects, or events …\nThe transaction being certified.\nVerify a proof against a committee. A proof is valid if it …\nChecks a specific object using the light client\nSync all end-of-epoch checkpoints\nChecks a specific transaction using the light client\nRead package contents. Fails if <code>id</code> is not an object, not a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun binary search to for each end of epoch checkpoint that …\nTransaction hash\nTransaction hash")